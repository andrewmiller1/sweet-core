'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _transforms = require('./transforms');

class Env {
  constructor() {
    this.map = new Map();
    this.map.set('function', _transforms.FunctionDeclTransform);
    this.map.set('var', _transforms.VariableDeclTransform);
    this.map.set('let', _transforms.LetDeclTransform);
    this.map.set('const', _transforms.ConstDeclTransform);
    this.map.set('syntaxrec', _transforms.SyntaxrecDeclTransform);
    this.map.set('syntax', _transforms.SyntaxDeclTransform);
    this.map.set('operator', _transforms.OperatorDeclTransform);
    this.map.set('return', _transforms.ReturnStatementTransform);
    this.map.set('while', _transforms.WhileTransform);
    this.map.set('if', _transforms.IfTransform);
    this.map.set('for', _transforms.ForTransform);
    this.map.set('switch', _transforms.SwitchTransform);
    this.map.set('break', _transforms.BreakTransform);
    this.map.set('continue', _transforms.ContinueTransform);
    this.map.set('do', _transforms.DoTransform);
    this.map.set('debugger', _transforms.DebuggerTransform);
    this.map.set('with', _transforms.WithTransform);
    this.map.set('import', _transforms.ImportTransform);
    this.map.set('export', _transforms.ExportTransform);
    this.map.set('super', _transforms.SuperTransform);
    this.map.set('this', _transforms.ThisTransform);
    this.map.set('class', _transforms.ClassTransform);
    this.map.set('default', _transforms.DefaultTransform);
    this.map.set('try', _transforms.TryTransform);
    this.map.set('yield', _transforms.YieldTransform);
    this.map.set('throw', _transforms.ThrowTransform);
    this.map.set('new', _transforms.NewTransform);
    this.map.set('async', _transforms.AsyncTransform);
    this.map.set('await', _transforms.AwaitTransform);
  }

  has(key) {
    return this.map.has(key);
  }

  get(key) {
    return this.map.get(key);
  }

  set(key, val) {
    return this.map.set(key, val);
  }
}
exports.default = Env;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbnYuanMiXSwibmFtZXMiOlsiRW52IiwiY29uc3RydWN0b3IiLCJtYXAiLCJNYXAiLCJzZXQiLCJoYXMiLCJrZXkiLCJnZXQiLCJ2YWwiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQWdDZSxNQUFNQSxHQUFOLENBQVU7QUFDdkJDLGdCQUFjO0FBQ1osU0FBS0MsR0FBTCxHQUFXLElBQUlDLEdBQUosRUFBWDtBQUNBLFNBQUtELEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFVBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxLQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsS0FBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxXQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsUUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFVBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxRQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsT0FBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLElBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxLQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsUUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxVQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsSUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFVBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxNQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsUUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFFBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxPQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsTUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxTQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsS0FBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxPQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsS0FBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxPQUFiO0FBQ0Q7O0FBRURDLE1BQUlDLEdBQUosRUFBUztBQUNQLFdBQU8sS0FBS0osR0FBTCxDQUFTRyxHQUFULENBQWFDLEdBQWIsQ0FBUDtBQUNEOztBQUVEQyxNQUFJRCxHQUFKLEVBQVM7QUFDUCxXQUFPLEtBQUtKLEdBQUwsQ0FBU0ssR0FBVCxDQUFhRCxHQUFiLENBQVA7QUFDRDs7QUFFREYsTUFBSUUsR0FBSixFQUFTRSxHQUFULEVBQWM7QUFDWixXQUFPLEtBQUtOLEdBQUwsQ0FBU0UsR0FBVCxDQUFhRSxHQUFiLEVBQWtCRSxHQUFsQixDQUFQO0FBQ0Q7QUE1Q3NCO2tCQUFKUixHIiwiZmlsZSI6ImVudi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEZ1bmN0aW9uRGVjbFRyYW5zZm9ybSxcbiAgVmFyaWFibGVEZWNsVHJhbnNmb3JtLFxuICBMZXREZWNsVHJhbnNmb3JtLFxuICBDb25zdERlY2xUcmFuc2Zvcm0sXG4gIFN5bnRheERlY2xUcmFuc2Zvcm0sXG4gIFN5bnRheHJlY0RlY2xUcmFuc2Zvcm0sXG4gIE9wZXJhdG9yRGVjbFRyYW5zZm9ybSxcbiAgUmV0dXJuU3RhdGVtZW50VHJhbnNmb3JtLFxuICBJZlRyYW5zZm9ybSxcbiAgRm9yVHJhbnNmb3JtLFxuICBTd2l0Y2hUcmFuc2Zvcm0sXG4gIEJyZWFrVHJhbnNmb3JtLFxuICBDb250aW51ZVRyYW5zZm9ybSxcbiAgRG9UcmFuc2Zvcm0sXG4gIERlYnVnZ2VyVHJhbnNmb3JtLFxuICBXaXRoVHJhbnNmb3JtLFxuICBJbXBvcnRUcmFuc2Zvcm0sXG4gIEV4cG9ydFRyYW5zZm9ybSxcbiAgU3VwZXJUcmFuc2Zvcm0sXG4gIFRoaXNUcmFuc2Zvcm0sXG4gIFlpZWxkVHJhbnNmb3JtLFxuICBDbGFzc1RyYW5zZm9ybSxcbiAgRGVmYXVsdFRyYW5zZm9ybSxcbiAgVHJ5VHJhbnNmb3JtLFxuICBUaHJvd1RyYW5zZm9ybSxcbiAgTmV3VHJhbnNmb3JtLFxuICBXaGlsZVRyYW5zZm9ybSxcbiAgQXN5bmNUcmFuc2Zvcm0sXG4gIEF3YWl0VHJhbnNmb3JtLFxufSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnYge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2Z1bmN0aW9uJywgRnVuY3Rpb25EZWNsVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ3ZhcicsIFZhcmlhYmxlRGVjbFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdsZXQnLCBMZXREZWNsVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2NvbnN0JywgQ29uc3REZWNsVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ3N5bnRheHJlYycsIFN5bnRheHJlY0RlY2xUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnc3ludGF4JywgU3ludGF4RGVjbFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdvcGVyYXRvcicsIE9wZXJhdG9yRGVjbFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdyZXR1cm4nLCBSZXR1cm5TdGF0ZW1lbnRUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnd2hpbGUnLCBXaGlsZVRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdpZicsIElmVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2ZvcicsIEZvclRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdzd2l0Y2gnLCBTd2l0Y2hUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnYnJlYWsnLCBCcmVha1RyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdjb250aW51ZScsIENvbnRpbnVlVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2RvJywgRG9UcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnZGVidWdnZXInLCBEZWJ1Z2dlclRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCd3aXRoJywgV2l0aFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdpbXBvcnQnLCBJbXBvcnRUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnZXhwb3J0JywgRXhwb3J0VHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ3N1cGVyJywgU3VwZXJUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgndGhpcycsIFRoaXNUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnY2xhc3MnLCBDbGFzc1RyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdkZWZhdWx0JywgRGVmYXVsdFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCd0cnknLCBUcnlUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgneWllbGQnLCBZaWVsZFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCd0aHJvdycsIFRocm93VHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ25ldycsIE5ld1RyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdhc3luYycsIEFzeW5jVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2F3YWl0JywgQXdhaXRUcmFuc2Zvcm0pO1xuICB9XG5cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5oYXMoa2V5KTtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSk7XG4gIH1cblxuICBzZXQoa2V5LCB2YWwpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuc2V0KGtleSwgdmFsKTtcbiAgfVxufVxuIl19
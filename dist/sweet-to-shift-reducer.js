'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sweetSpec = require('sweet-spec');

var S = _interopRequireWildcard(_sweetSpec);

var _ramda = require('ramda');

var _immutable = require('immutable');

var _terms = require('./terms');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const notEmptyStatement = (0, _ramda.complement)(_terms.isEmptyStatement);

// $FlowFixMe: flow doesn't know about CloneReducer yet
exports.default = class extends S.default.CloneReducer {

  constructor(phase) {
    super();
    this.phase = phase;
  }

  reduceModule(t, s) {
    return new S.Module({
      directives: s.directives.filter(d => !d.startsWith('lang')).map(d => ({ type: 'Directive', rawValue: d })).toArray(),
      items: s.items.toArray().filter(notEmptyStatement)
    });
  }

  reduceIdentifierExpression(t, s) {
    return new S.IdentifierExpression({
      name: s.name.resolve(this.phase)
    });
  }

  reduceStaticPropertyName(t, s) {
    return new S.StaticPropertyName({
      value: s.value.val().toString()
    });
  }

  reduceBindingIdentifier(t, s) {
    return new S.BindingIdentifier({
      name: s.name.resolve(this.phase)
    });
  }

  reduceAssignmentTargetIdentifier(t, s) {
    return new S.AssignmentTargetIdentifier({
      name: s.name.resolve(this.phase)
    });
  }

  reduceStaticMemberExpression(t, s) {
    return new S.StaticMemberExpression({
      object: s.object,
      property: s.property.val()
    });
  }

  reduceStaticMemberAssignmentTarget(t, s) {
    return new S.StaticMemberAssignmentTarget({
      object: s.object,
      property: s.property.val()
    });
  }

  reduceFunctionBody(t, s) {
    return new S.FunctionBody({
      directives: s.directives.toArray(),
      statements: s.statements.toArray().filter(notEmptyStatement)
    });
  }

  reduceVariableDeclarationStatement(t, s) {
    if (t.declaration.kind === 'syntax' || t.declaration.kind === 'syntaxrec' || t.declaration.kind === 'operator') {
      return new S.EmptyStatement();
    }
    return new S.VariableDeclarationStatement({
      declaration: s.declaration
    });
  }

  reduceVariableDeclaration(t, s) {
    return new S.VariableDeclaration({
      kind: s.kind,
      declarators: s.declarators.toArray()
    });
  }

  reduceCallExpression(t, s) {
    return new S.CallExpression({
      callee: s.callee,
      arguments: s.arguments.toArray()
    });
  }

  reduceArrayExpression(t, s) {
    return new S.ArrayExpression({
      elements: s.elements.toArray()
    });
  }

  reduceImportNamespace(t, s) {
    if (s.forSyntax) {
      return new S.EmptyStatement();
    }
    return t;
  }

  reduceImport(t, s) {
    if (s.forSyntax) {
      return new S.EmptyStatement();
    }
    return new S.Import({
      forSyntax: false,
      defaultBinding: s.defaultBinding,
      moduleSpecifier: s.moduleSpecifier.val(),
      namedImports: s.namedImports.toArray()
    });
  }

  reduceBlock(t, s) {
    return new S.Block({
      statements: s.statements.toArray().filter(notEmptyStatement)
    });
  }

  reduceExportFromSpecifier(t, s) {
    return new S.ExportFromSpecifier({
      name: s.name.resolve(0),
      exportedName: s.exportedName == null ? null : s.exportedName.val()
    });
  }

  reduceExportLocalSpecifier(t, s) {
    return new S.ExportLocalSpecifier({
      name: s.name,
      exportedName: s.exportedName == null ? null : s.exportedName.val()
    });
  }

  reduceExportFrom(t, s) {
    return new S.ExportFrom({
      moduleSpecifier: s.moduleSpecifier != null ? s.moduleSpecifier.val() : null,
      namedExports: s.namedExports.toArray()
    });
  }

  reduceExportLocals(t, s) {
    return new S.ExportLocals({
      moduleSpecifier: s.moduleSpecifier != null ? s.moduleSpecifier.val() : null,
      namedExports: s.namedExports.toArray()
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompiletimeTransform = exports.VarBindingTransform = exports.ModuleNamespaceTransform = exports.AwaitTransform = exports.AsyncTransform = exports.ReturnStatementTransform = exports.OperatorDeclTransform = exports.SyntaxDeclTransform = exports.SyntaxrecDeclTransform = exports.DebuggerTransform = exports.DefaultTransform = exports.ClassTransform = exports.ThisTransform = exports.YieldTransform = exports.SuperTransform = exports.ExportTransform = exports.ImportTransform = exports.WithTransform = exports.DoTransform = exports.ContinueTransform = exports.BreakTransform = exports.SwitchTransform = exports.ForTransform = exports.IfTransform = exports.WhileTransform = exports.TryTransform = exports.ConstDeclTransform = exports.LetDeclTransform = exports.ThrowTransform = exports.NewTransform = exports.VariableDeclTransform = exports.FunctionDeclTransform = undefined;

var _sweetModule = require('./sweet-module');

var _sweetModule2 = _interopRequireDefault(_sweetModule);

var _syntax = require('./syntax');

var _syntax2 = _interopRequireDefault(_syntax);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FunctionDeclTransform {}
exports.FunctionDeclTransform = FunctionDeclTransform;
class VariableDeclTransform {}
exports.VariableDeclTransform = VariableDeclTransform;
class NewTransform {}
exports.NewTransform = NewTransform;
class ThrowTransform {}
exports.ThrowTransform = ThrowTransform;
class LetDeclTransform {}
exports.LetDeclTransform = LetDeclTransform;
class ConstDeclTransform {}
exports.ConstDeclTransform = ConstDeclTransform;
class TryTransform {}
exports.TryTransform = TryTransform;
class WhileTransform {}
exports.WhileTransform = WhileTransform;
class IfTransform {}
exports.IfTransform = IfTransform;
class ForTransform {}
exports.ForTransform = ForTransform;
class SwitchTransform {}
exports.SwitchTransform = SwitchTransform;
class BreakTransform {}
exports.BreakTransform = BreakTransform;
class ContinueTransform {}
exports.ContinueTransform = ContinueTransform;
class DoTransform {}
exports.DoTransform = DoTransform;
class WithTransform {}
exports.WithTransform = WithTransform;
class ImportTransform {}
exports.ImportTransform = ImportTransform;
class ExportTransform {}
exports.ExportTransform = ExportTransform;
class SuperTransform {}
exports.SuperTransform = SuperTransform;
class YieldTransform {}
exports.YieldTransform = YieldTransform;
class ThisTransform {}
exports.ThisTransform = ThisTransform;
class ClassTransform {}
exports.ClassTransform = ClassTransform;
class DefaultTransform {}
exports.DefaultTransform = DefaultTransform;
class DebuggerTransform {}
exports.DebuggerTransform = DebuggerTransform;
class SyntaxrecDeclTransform {}
exports.SyntaxrecDeclTransform = SyntaxrecDeclTransform;
class SyntaxDeclTransform {}
exports.SyntaxDeclTransform = SyntaxDeclTransform;
class OperatorDeclTransform {}
exports.OperatorDeclTransform = OperatorDeclTransform;
class ReturnStatementTransform {}
exports.ReturnStatementTransform = ReturnStatementTransform;
class AsyncTransform {}
exports.AsyncTransform = AsyncTransform;
class AwaitTransform {}
exports.AwaitTransform = AwaitTransform;
class ModuleNamespaceTransform {

  constructor(namespace, mod) {
    this.namespace = namespace;
    this.mod = mod;
  }
}
exports.ModuleNamespaceTransform = ModuleNamespaceTransform;
class VarBindingTransform {

  constructor(id) {
    this.id = id;
  }
}
exports.VarBindingTransform = VarBindingTransform;
class CompiletimeTransform {

  constructor(value) {
    this.value = value;
  }
}
exports.CompiletimeTransform = CompiletimeTransform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc2Zvcm1zLmpzIl0sIm5hbWVzIjpbIkZ1bmN0aW9uRGVjbFRyYW5zZm9ybSIsIlZhcmlhYmxlRGVjbFRyYW5zZm9ybSIsIk5ld1RyYW5zZm9ybSIsIlRocm93VHJhbnNmb3JtIiwiTGV0RGVjbFRyYW5zZm9ybSIsIkNvbnN0RGVjbFRyYW5zZm9ybSIsIlRyeVRyYW5zZm9ybSIsIldoaWxlVHJhbnNmb3JtIiwiSWZUcmFuc2Zvcm0iLCJGb3JUcmFuc2Zvcm0iLCJTd2l0Y2hUcmFuc2Zvcm0iLCJCcmVha1RyYW5zZm9ybSIsIkNvbnRpbnVlVHJhbnNmb3JtIiwiRG9UcmFuc2Zvcm0iLCJXaXRoVHJhbnNmb3JtIiwiSW1wb3J0VHJhbnNmb3JtIiwiRXhwb3J0VHJhbnNmb3JtIiwiU3VwZXJUcmFuc2Zvcm0iLCJZaWVsZFRyYW5zZm9ybSIsIlRoaXNUcmFuc2Zvcm0iLCJDbGFzc1RyYW5zZm9ybSIsIkRlZmF1bHRUcmFuc2Zvcm0iLCJEZWJ1Z2dlclRyYW5zZm9ybSIsIlN5bnRheHJlY0RlY2xUcmFuc2Zvcm0iLCJTeW50YXhEZWNsVHJhbnNmb3JtIiwiT3BlcmF0b3JEZWNsVHJhbnNmb3JtIiwiUmV0dXJuU3RhdGVtZW50VHJhbnNmb3JtIiwiQXN5bmNUcmFuc2Zvcm0iLCJBd2FpdFRyYW5zZm9ybSIsIk1vZHVsZU5hbWVzcGFjZVRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwibmFtZXNwYWNlIiwibW9kIiwiVmFyQmluZGluZ1RyYW5zZm9ybSIsImlkIiwiQ29tcGlsZXRpbWVUcmFuc2Zvcm0iLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVPLE1BQU1BLHFCQUFOLENBQTRCO1FBQXRCQSxxQixHQUFBQSxxQjtBQUNOLE1BQU1DLHFCQUFOLENBQTRCO1FBQXRCQSxxQixHQUFBQSxxQjtBQUNOLE1BQU1DLFlBQU4sQ0FBbUI7UUFBYkEsWSxHQUFBQSxZO0FBQ04sTUFBTUMsY0FBTixDQUFxQjtRQUFmQSxjLEdBQUFBLGM7QUFDTixNQUFNQyxnQkFBTixDQUF1QjtRQUFqQkEsZ0IsR0FBQUEsZ0I7QUFDTixNQUFNQyxrQkFBTixDQUF5QjtRQUFuQkEsa0IsR0FBQUEsa0I7QUFDTixNQUFNQyxZQUFOLENBQW1CO1FBQWJBLFksR0FBQUEsWTtBQUNOLE1BQU1DLGNBQU4sQ0FBcUI7UUFBZkEsYyxHQUFBQSxjO0FBQ04sTUFBTUMsV0FBTixDQUFrQjtRQUFaQSxXLEdBQUFBLFc7QUFDTixNQUFNQyxZQUFOLENBQW1CO1FBQWJBLFksR0FBQUEsWTtBQUNOLE1BQU1DLGVBQU4sQ0FBc0I7UUFBaEJBLGUsR0FBQUEsZTtBQUNOLE1BQU1DLGNBQU4sQ0FBcUI7UUFBZkEsYyxHQUFBQSxjO0FBQ04sTUFBTUMsaUJBQU4sQ0FBd0I7UUFBbEJBLGlCLEdBQUFBLGlCO0FBQ04sTUFBTUMsV0FBTixDQUFrQjtRQUFaQSxXLEdBQUFBLFc7QUFDTixNQUFNQyxhQUFOLENBQW9CO1FBQWRBLGEsR0FBQUEsYTtBQUNOLE1BQU1DLGVBQU4sQ0FBc0I7UUFBaEJBLGUsR0FBQUEsZTtBQUNOLE1BQU1DLGVBQU4sQ0FBc0I7UUFBaEJBLGUsR0FBQUEsZTtBQUNOLE1BQU1DLGNBQU4sQ0FBcUI7UUFBZkEsYyxHQUFBQSxjO0FBQ04sTUFBTUMsY0FBTixDQUFxQjtRQUFmQSxjLEdBQUFBLGM7QUFDTixNQUFNQyxhQUFOLENBQW9CO1FBQWRBLGEsR0FBQUEsYTtBQUNOLE1BQU1DLGNBQU4sQ0FBcUI7UUFBZkEsYyxHQUFBQSxjO0FBQ04sTUFBTUMsZ0JBQU4sQ0FBdUI7UUFBakJBLGdCLEdBQUFBLGdCO0FBQ04sTUFBTUMsaUJBQU4sQ0FBd0I7UUFBbEJBLGlCLEdBQUFBLGlCO0FBQ04sTUFBTUMsc0JBQU4sQ0FBNkI7UUFBdkJBLHNCLEdBQUFBLHNCO0FBQ04sTUFBTUMsbUJBQU4sQ0FBMEI7UUFBcEJBLG1CLEdBQUFBLG1CO0FBQ04sTUFBTUMscUJBQU4sQ0FBNEI7UUFBdEJBLHFCLEdBQUFBLHFCO0FBQ04sTUFBTUMsd0JBQU4sQ0FBK0I7UUFBekJBLHdCLEdBQUFBLHdCO0FBQ04sTUFBTUMsY0FBTixDQUFxQjtRQUFmQSxjLEdBQUFBLGM7QUFDTixNQUFNQyxjQUFOLENBQXFCO1FBQWZBLGMsR0FBQUEsYztBQUNOLE1BQU1DLHdCQUFOLENBQStCOztBQUlwQ0MsY0FBWUMsU0FBWixFQUErQkMsR0FBL0IsRUFBaUQ7QUFDL0MsU0FBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxHQUFMLEdBQVdBLEdBQVg7QUFDRDtBQVBtQztRQUF6Qkgsd0IsR0FBQUEsd0I7QUFTTixNQUFNSSxtQkFBTixDQUEwQjs7QUFHL0JILGNBQVlJLEVBQVosRUFBd0I7QUFDdEIsU0FBS0EsRUFBTCxHQUFVQSxFQUFWO0FBQ0Q7QUFMOEI7UUFBcEJELG1CLEdBQUFBLG1CO0FBT04sTUFBTUUsb0JBQU4sQ0FBMkI7O0FBR2hDTCxjQUFZTSxLQUFaLEVBQXdCO0FBQ3RCLFNBQUtBLEtBQUwsR0FBYUEsS0FBYjtBQUNEO0FBTCtCO1FBQXJCRCxvQixHQUFBQSxvQiIsImZpbGUiOiJ0cmFuc2Zvcm1zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCBTd2VldE1vZHVsZSBmcm9tICcuL3N3ZWV0LW1vZHVsZSc7XG5pbXBvcnQgU3ludGF4IGZyb20gJy4vc3ludGF4JztcblxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uRGVjbFRyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlRGVjbFRyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIE5ld1RyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIFRocm93VHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgTGV0RGVjbFRyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIENvbnN0RGVjbFRyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIFRyeVRyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIFdoaWxlVHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgSWZUcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBGb3JUcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBTd2l0Y2hUcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBCcmVha1RyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIENvbnRpbnVlVHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgRG9UcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBXaXRoVHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgSW1wb3J0VHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgRXhwb3J0VHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgU3VwZXJUcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBZaWVsZFRyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIFRoaXNUcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBDbGFzc1RyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIERlZmF1bHRUcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBEZWJ1Z2dlclRyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIFN5bnRheHJlY0RlY2xUcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBTeW50YXhEZWNsVHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgT3BlcmF0b3JEZWNsVHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgUmV0dXJuU3RhdGVtZW50VHJhbnNmb3JtIHt9XG5leHBvcnQgY2xhc3MgQXN5bmNUcmFuc2Zvcm0ge31cbmV4cG9ydCBjbGFzcyBBd2FpdFRyYW5zZm9ybSB7fVxuZXhwb3J0IGNsYXNzIE1vZHVsZU5hbWVzcGFjZVRyYW5zZm9ybSB7XG4gIG5hbWVzcGFjZTogU3ludGF4O1xuICBtb2Q6IFN3ZWV0TW9kdWxlO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWVzcGFjZTogU3ludGF4LCBtb2Q6IFN3ZWV0TW9kdWxlKSB7XG4gICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgdGhpcy5tb2QgPSBtb2Q7XG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBWYXJCaW5kaW5nVHJhbnNmb3JtIHtcbiAgaWQ6IFN5bnRheDtcblxuICBjb25zdHJ1Y3RvcihpZDogU3ludGF4KSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICB9XG59XG5leHBvcnQgY2xhc3MgQ29tcGlsZXRpbWVUcmFuc2Zvcm0ge1xuICB2YWx1ZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbn1cbiJdfQ==